#POO en clase
class Golondrina:
  def _init_(self, energia):
    self.energia = energia

  def comer_alpiste(self, gramos):
    self.energia += 4 * gramos

  def volar_en_circulos(self):
    self.volar(0)

  def volar(self, kms):
    self.energia -= 10 + kms 

class Dragon:     
  def _init_(self, cantidad_dientes, energia):
    self.energia = energia
    self.cantidad_dientes = cantidad_dientes

  def escupir_fuego(self):
    self.energia -= 2 * self.cantidad_dientes

  def comer_peces(self, unidades):
    self.energia += 100 * unidades

  def volar_en_circulos(self):
    self.energia -= 1

  def volar(self, kms):
    self.energia -= 10 + kms/10

pepita = Golondrina(100)
anastasia = Golondrina(200)
roberta = Dragon(10, 1000)

class Titan(): 
    def _init_(self, salud): 
        self.salud = salud 
        self.correr = False 

    def salud_actual(self): 
        return self.salud 

    def recibir_ataques(self, cantidad): 
        self.salud -= 1.5 * cantidad 

    def grito(self): 
        return "¡Aaaarrrg!"

    def cuantas_casas(self): 
        return (self.salud * 8 / 100)

    def destruir_casas(self): 
        if (self.cuantas_casas() > 1): 
            if ((self.cuantas_casas() % 1) > 0): 
                self.salud -= (self.cuantas_casas() // 1) * 12.5
            else: 
                self.salud -= (self.cuantas_casas() - 1) * 12.5
        else: 
            print("No puede destruir ninguna casa")
    
    def esta_vivo(self): 
        return (self.salud > 0)

#crear clase Enterprise
'''
class Enterprise(): 
    def _init_(self, potencia, coraza):
        self.potencia = 0
        self.coraza = 0
    
    def potencia(self): 
        return self.potencia 

    def coraza(self): 
        return self.coraza 

    def encontrarPilaAtomica(self, potencia): 
        return potencia + 25

    def encontrarEscudo(self, coraza):
        return coraza + 10

    def fortalezaDefensiva(self):
        return self.potencia + self.coraza
        
    def necesitaFortalecerse(self):
        return self.potencia < 20 and self.coraza == 0
        
    def fortalezaOfensiva(self): 
        if self.potencia < 20: 
            return 0
        else: 
            return (self.potencia -20) / 2   '''

#no me sale la de recibirAtaque aiuda 
# POO EJERCICIOS ~ PRÁCTICA
# EJERCICIO 1
'''class Perro:
    def _init_(self):
        self._alimento = 0
        self._caricias = 0

    def energia(self):
        return self._alimento + (self._caricias * 10)

    def comer(self, gramos):
        self._alimento += gramos

    def acariciar(self):
        self._caricias += 1

    def estaDebil(self):
        return self._caricias < 2'''

# EJERCICIO 2
'''  def volar(self, kms):
    self.energia -= 10 + kms''' #inicial

'''
def volar(self, kms):
    if self.energia <= 0: 
        return False
    else: 
self-energia -= 10 + kms''' 

#EJERICIO 5

from ave import pepita, juanita, roberta
class AnimalesAlado: 
    def esta_feliz(self): 
      return self.energia > 500        

class Golondrina(AnimalesAlado):
  def _init_(self, energia):
    self.energia = energia

  def comer_alpiste(self, gramos):
    self.energia += 4 * gramos

  def volar_en_circulos(self):
    self.volar(0)

  def volar(self, kms):
    self.energia -= 10 + kms 
  
  def esta_debil(self): 
      return self.energia < 10         #EJERICIO 3a
  
  def esta_feliz(self): 
      return self.energia > 500        #EJERICIO 4a

class Dragon(AnimalesAlado):     
  def _init_(self, cantidad_dientes, energia):
    self.energia = energia
    self.cantidad_dientes = cantidad_dientes

  def escupir_fuego(self):
    self.energia -= 2 * self.cantidad_dientes

  def comer_peces(self, unidades):
    self.energia += 100 * unidades

  def volar_en_circulos(self):
    self.energia -= 1

  def volar(self, kms):
    self.energia -= 10 + kms/10

def esta_debil(self): 
    self.energia < 50           #EJERICIO 3b

def esta_feliz(self): 
    return self.energia > 500   #EJERICIO 4b

pepita = Golondrina(100)
juanita = Golondrina(100)
anastasia = Golondrina(200)
roberta = Dragon(10, 1000)
maria = Golondrina(42)          #EJERCICIO 1
chimuelo = Dragon(200, 1000)    #EJERCICIO 2

'''Si las clases hijas heredan de la clase madre tendría todos sus atributos
Eso se hace poniendo en el parentetis de la clase hija (ej. class Golondrina(AnimalesAlado):) 
poniendole el apellido de su hija.'''

# EJERICIO 5
class Entrenador: """El estado del entrenador es el equipo"""
"""¿Qué hay que lograr? Un entrenador tiene un equipo y puede admitir nuevos miembros a su equipo"""
def _init_(self, equipo): 
    self.equipo = equipo 

def el_equipo(self): #el guetter que retorna el estado de un objeto, ES LA FORMA CORRECTA
    return self.equipo

def agregar_animal_alado(self, animal): 
    '''Este método toma un objeto animal alado que tendrá todos los atributos de esa clase'''
    self.equipo.append(animal)

def entrenar_dragon(self, dragon): #sólo self porque contempla ya todo
    for vuelta in range(20): 
        dragon.volar_en_circulos()
    dragon.comer_peces(3)

def entrenar_equipo(self): 
    for dragon in self.equipo: 
        self.entrenar_dragon(dragon)